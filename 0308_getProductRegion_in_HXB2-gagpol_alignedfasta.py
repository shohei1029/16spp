

#2016.3.8
#HXB2のgag-pol配列を付けてアライメントしたfastaの，gap付き配列を読み込ませ，swissprotからのタンパク質領域とかの情報を入れ,
#アライメント後のfastaでのpositionを出力する。それだけ
#その後，collectDomain_byPfam_getpos_inAlignedFasta_createSecFasta.py のsectionごとに配列切り出す機能を使い，polのタンパク質ごとの配列を取得する。

def seqpos_to_gapped_seqpos(pos,seq):
#    '''
#    ギャップなしFASTAファイルのpositionをギャップ有りFASTAファイルのpositionへ変換
#    convert char position in ungapped FASTA to gapped FASTA. (I'm sorry I can't use English well.)
#    '''
    c_count = 0
    gapped_pos = 0
    for c in seq:
        if c != '-':
            c_count += 1
        gapped_pos += 1
        if c_count == pos:
            return gapped_pos

gpdseq = "MGARASVLSGGELDRWEKIRLRPGGKKKYKLKHIVWASRELERFAVNPGLLETSEGCRQILGQLQPSLQTGSEELRSLYNTVATLYCVHQRIEIKDTKEALDKIEEEQNKSKKKAQQAAADTGHSNQVSQNYPIVQNIQGQMVHQAISPRTLNAWVKVVEEKAFSPEVIPMFSALSEGATPQDLNTMLNTVGGHQAAMQMLKETINEEAAEWDRVHPVHAGPIAPGQMREPRGSDIAGTTSTLQEQIGWMTNNPPIPVGEIYKRWIILGLNKIVRMYSPTSILDIRQGPKEPFRDYVDRFYKTLRAEQASQEVKNWMTETLLVQNANPDCKTILKALGPAATLEEMMTACQGVGGPGHKARVLAEAMSQVTNSATIMMQRGNFRNQRKIVKCFNCGKEGHTARNCRAPRKKGCWKCGKEGHQMKDCTERQANFLREDLAFL-Q-GKARE--------F----------------S----------S---------------E-----------Q------T-----------------R------A-------------------N------------------------------S-------P---------------T-------R----------R------ELQVWG---RD---------N----N------S--P-------S-------E-----A-------G----AD----R----Q-------G-----T-----V-S----FN----FPQVTLWQRPLVTIKIGGQLKEALLDTGADDTVL-EEMSLPGRWKPKMIGGIGGFIKVRQYDQILIEICGHKAIGTVLVGPTPVNIIGRNLLTQIGCTLNFPISPIETVPVKLKPGMDGPKVKQWPL-TEEKIKALVEICTEMEKEGKISKI-GPENPYNTPVFAIKKKD--STKWRKLVDFRELNKRTQDFWEVQLGIPHPAGLKKKKSVTVLDVGDAYFSVPLDEDFRKYTAFTIPSINNETPGIRYQYNVLPQGWKGSPAIFQSSMTKILEPFRKQNPDIVIYQYMDDLYVGSDLEIGQHRTKIEELRQHLLRWGLTTPDKKHQKEPPFLWMGYELHPDKWTVQPIVLPEKDSWTVNDIQKLVGKL------NWASQIYPGIKVRQLCKLLRGTKALTEVIPLTEEAELELAENREILKEPVHGVYYDPSK-----DLIAEIQKQGQGQWTYQIYQEPFKNLKTGKYARMRGAHTNDVKQLTEAVQKITTESIVIWGKTPKFKLPIQKETWETWWTEYWQATWIPEWEFVNTPPLVKLWYQLEKEPIVGAETFYVDGAANRETKLGKAGYVTNRGRQKVVTLTDTTNQKTELQAIYLALQDSGLEVNIVTDSQYALGIIQAQPDQSESELVNQIIEQLIKKEKVYLAWVPAHKGIGGNEQVDKLVSAGIRKVLFLDGIDKAQDEHEKYHSNWRAMASDFNLPPVVAKEIVASCDKCQLKGEAMHGQVDCSPGIWQLDCTHLEGKVILVAVHVASGYIEAEVIPAETGQETAYFLLKLAGRWPVKTIHTDNGSNFTGATVRAACWWAGIKQEFGIPYNPQSQGVVESMNKELKKIIGQVRDQAEHLKTAVQMAVFIHNFKRKG-GIGGYSAGERIVDIIATDIQTKELQKQITKIQNFRVYYRDSRNPLWKGPAKLLWKGEGAVVIQ--DNSDIKVVPRRKAKIIRDYGKQMAGDDCVASRQDED-----------------"

end_pos = len(gpdseq) #1744
sec_ld_nogap = {'Protease':[489, 587], 'p51 RT':[588, 1027], 'p15':[1028, 1147], 'Integrase':[1148, 1435]}

def create_sec_pos_gpd(sec_ld_nogap, gpdseq):
    sec_ld_gap = {}
    for p, pl in sec_ld_nogap.items():
        s = seqpos_to_gapped_seqpos(pl[0],gpdseq)
        e = seqpos_to_gapped_seqpos(pl[1],gpdseq)
        sec_ld_gap[p] = [s,e]
    return sec_ld_gap

if __name__ == '__main__':
    seq_sec = create_sec_pos_gpd(sec_ld_nogap, gpdseq)
    print(seq_sec)


